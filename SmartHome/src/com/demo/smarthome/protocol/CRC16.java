package com.demo.smarthome.protocol;

import java.util.zip.Checksum;

/**
 * User: punksa Date: 13-10-11 Time: ÏÂÎç10:33
 */

public class CRC16 implements Checksum {
	// private static final int[] TABLE = {
	// 0x00, 0xc1c0, 0x81c1, 0x401, 0x1c3, 0xc03, 0x802, 0x41c2,
	// 0x1c6, 0xc06, 0x807, 0x41c7, 0x05, 0xc1c5, 0x81c4, 0x404,
	// 0x1cc, 0xc0c, 0x80d, 0x41cd, 0x0f, 0xc1cf, 0x81ce, 0x40e,
	// 0x0a, 0xc1ca, 0x81cb, 0x40b, 0x1c9, 0xc09, 0x808, 0x41c8,
	// 0x1d8, 0xc018, 0x8019, 0x41d9, 0x01b, 0xc1db, 0x81da, 0x401a,
	// 0x01e, 0xc1de, 0x81df, 0x401f, 0x1dd, 0xc01d, 0x801c, 0x41dc,
	// 0x014, 0xc1d4, 0x81d5, 0x4015, 0x1d7, 0xc017, 0x8016, 0x41d6,
	// 0x1d2, 0xc012, 0x8013, 0x41d3, 0x011, 0xc1d1, 0x81d0, 0x4010,
	// 0x1f0, 0xc030, 0x8031, 0x41f1, 0x033, 0xc1f3, 0x81f2, 0x4032,
	// 0x036, 0xc1f6, 0x81f7, 0x4037, 0x1f5, 0xc035, 0x8034, 0x41f4,
	// 0x03c, 0xc1fc, 0x81fd, 0x403d, 0x1ff, 0xc03f, 0x803e, 0x41fe,
	// 0x1fa, 0xc03a, 0x803b, 0x41fb, 0x039, 0xc1f9, 0x81f8, 0x4038,
	// 0x028, 0xc1e8, 0x81e9, 0x4029, 0x1eb, 0xc02b, 0x802a, 0x41ea,
	// 0x1ee, 0xc02e, 0x802f, 0x41ef, 0x02d, 0xc1ed, 0x81ec, 0x402c,
	// 0x1e4, 0xc024, 0x8025, 0x41e5, 0x027, 0xc1e7, 0x81e6, 0x4026,
	// 0x022, 0xc1e2, 0x81e3, 0x4023, 0x1e1, 0xc021, 0x8020, 0x41e0,
	// 0x1a0, 0xc060, 0x8061, 0x41a1, 0x063, 0xc1a3, 0x81a2, 0x4062,
	// 0x066, 0xc1a6, 0x81a7, 0x4067, 0x1a5, 0xc065, 0x8064, 0x41a4,
	// 0x06c, 0xc1ac, 0x81ad, 0x406d, 0x1af, 0xc06f, 0x806e, 0x41ae,
	// 0x1aa, 0xc06a, 0x806b, 0x41ab, 0x069, 0xc1a9, 0x81a8, 0x4068,
	// 0x078, 0xc1b8, 0x81b9, 0x4079, 0x1bb, 0xc07b, 0x807a, 0x41ba,
	// 0x1be, 0xc07e, 0x807f, 0x41bf, 0x07d, 0xc1bd, 0x81bc, 0x407c,
	// 0x1b4, 0xc074, 0x8075, 0x41b5, 0x077, 0xc1b7, 0x81b6, 0x4076,
	// 0x072, 0xc1b2, 0x81b3, 0x4073, 0x1b1, 0xc071, 0x8070, 0x41b0,
	// 0x050, 0xc190, 0x8191, 0x4051, 0x193, 0xc053, 0x8052, 0x4192,
	// 0x196, 0xc056, 0x8057, 0x4197, 0x055, 0xc195, 0x8194, 0x4054,
	// 0x19c, 0xc05c, 0x805d, 0x419d, 0x05f, 0xc19f, 0x819e, 0x405e,
	// 0x05a, 0xc19a, 0x819b, 0x405b, 0x199, 0xc059, 0x8058, 0x4198,
	// 0x188, 0xc048, 0x8049, 0x4189, 0x04b, 0xc18b, 0x818a, 0x404a,
	// 0x04e, 0xc18e, 0x818f, 0x404f, 0x18d, 0xc04d, 0x804c, 0x418c,
	// 0x044, 0xc184, 0x8185, 0x4045, 0x187, 0xc047, 0x8046, 0x4186,
	// 0x182, 0xc042, 0x8043, 0x4183, 0x041, 0xc181, 0x8180, 0x4040
	// };

	private static final int[] TABLE = { 0x0000, 0xc0c1, 0xc181, 0x0140,
			0xc301, 0x03c0, 0x0280, 0xc241, 0xc601, 0x06c0, 0x0780, 0xc741,
			0x0500, 0xc5c1, 0xc481, 0x0440, 0xcc01, 0x0cc0, 0x0d80, 0xcd41,
			0x0f00, 0xcfc1, 0xce81, 0x0e40, 0x0a00, 0xcac1, 0xcb81, 0x0b40,
			0xc901, 0x09c0, 0x0880, 0xc841, 0xd801, 0x18c0, 0x1980, 0xd941,
			0x1b00, 0xdbc1, 0xda81, 0x1a40, 0x1e00, 0xdec1, 0xdf81, 0x1f40,
			0xdd01, 0x1dc0, 0x1c80, 0xdc41, 0x1400, 0xd4c1, 0xd581, 0x1540,
			0xd701, 0x17c0, 0x1680, 0xd641, 0xd201, 0x12c0, 0x1380, 0xd341,
			0x1100, 0xd1c1, 0xd081, 0x1040, 0xf001, 0x30c0, 0x3180, 0xf141,
			0x3300, 0xf3c1, 0xf281, 0x3240, 0x3600, 0xf6c1, 0xf781, 0x3740,
			0xf501, 0x35c0, 0x3480, 0xf441, 0x3c00, 0xfcc1, 0xfd81, 0x3d40,
			0xff01, 0x3fc0, 0x3e80, 0xfe41, 0xfa01, 0x3ac0, 0x3b80, 0xfb41,
			0x3900, 0xf9c1, 0xf881, 0x3840, 0x2800, 0xe8c1, 0xe981, 0x2940,
			0xeb01, 0x2bc0, 0x2a80, 0xea41, 0xee01, 0x2ec0, 0x2f80, 0xef41,
			0x2d00, 0xedc1, 0xec81, 0x2c40, 0xe401, 0x24c0, 0x2580, 0xe541,
			0x2700, 0xe7c1, 0xe681, 0x2640, 0x2200, 0xe2c1, 0xe381, 0x2340,
			0xe101, 0x21c0, 0x2080, 0xe041, 0xa001, 0x60c0, 0x6180, 0xa141,
			0x6300, 0xa3c1, 0xa281, 0x6240, 0x6600, 0xa6c1, 0xa781, 0x6740,
			0xa501, 0x65c0, 0x6480, 0xa441, 0x6c00, 0xacc1, 0xad81, 0x6d40,
			0xaf01, 0x6fc0, 0x6e80, 0xae41, 0xaa01, 0x6ac0, 0x6b80, 0xab41,
			0x6900, 0xa9c1, 0xa881, 0x6840, 0x7800, 0xb8c1, 0xb981, 0x7940,
			0xbb01, 0x7bc0, 0x7a80, 0xba41, 0xbe01, 0x7ec0, 0x7f80, 0xbf41,
			0x7d00, 0xbdc1, 0xbc81, 0x7c40, 0xb401, 0x74c0, 0x7580, 0xb541,
			0x7700, 0xb7c1, 0xb681, 0x7640, 0x7200, 0xb2c1, 0xb381, 0x7340,
			0xb101, 0x71c0, 0x7080, 0xb041, 0x5000, 0x90c1, 0x9181, 0x5140,
			0x9301, 0x53c0, 0x5280, 0x9241, 0x9601, 0x56c0, 0x5780, 0x9741,
			0x5500, 0x95c1, 0x9481, 0x5440, 0x9c01, 0x5cc0, 0x5d80, 0x9d41,
			0x5f00, 0x9fc1, 0x9e81, 0x5e40, 0x5a00, 0x9ac1, 0x9b81, 0x5b40,
			0x9901, 0x59c0, 0x5880, 0x9841, 0x8801, 0x48c0, 0x4980, 0x8941,
			0x4b00, 0x8bc1, 0x8a81, 0x4a40, 0x4e00, 0x8ec1, 0x8f81, 0x4f40,
			0x8d01, 0x4dc0, 0x4c80, 0x8c41, 0x4400, 0x84c1, 0x8581, 0x4540,
			0x8701, 0x47c0, 0x4680, 0x8641, 0x8201, 0x42c0, 0x4380, 0x8341,
			0x4100, 0x81c1, 0x8081, 0x4040 };
	private int sum = 0xFFFF;

	public long getValue() {
		return sum;
	}

	public void reset() {
		sum = 0xFFFF;
	}

	public void update(byte[] b, int off, int len) {
		for (int i = off; i < off + len; i++)
			update((int) b[i]);
	}

	public void update(int b) {
		sum = (sum >> 8) ^ TABLE[((sum) ^ (b & 0xff)) & 0xff];
	}

	public byte[] getCrcBytes() {
		long crc = (int) this.getValue();
		byte[] byteStr = new byte[2];
		byteStr[0] = (byte) ((crc & 0x000000ff));
		byteStr[1] = (byte) ((crc & 0x0000ff00) >>> 8);
		return byteStr;
	}

	// public static void main(String[] args) {
	// CRC16Modbus crc = new CRC16Modbus();
	// int[] data = new int[]{-86, 90, -79, -125, 1, 0, 30, -92, 0, 76, 113, 1,
	// 2, 6, 82, 116, 92, -126, 76, -126, 90, -116, 80, 61, 68, 0, 0, 0, 0, 0,
	// 0, 0, 0};
	// for (int d : data) {
	// crc.update(d);
	// }
	// System.out.println(Integer.toHexString((int) crc.getValue()));
	// byte[] byteStr = new byte[2];
	// byteStr[0] = (byte) ((crc.getValue() & 0x000000ff));
	// byteStr[1] = (byte) ((crc.getValue() & 0x0000ff00) >>> 8);
	//
	// System.out.printf("%02X%02X\n", byteStr[0], byteStr[1]);
	// System.out.printf("%02d\n%02d\n", byteStr[0], byteStr[1]);
	// }

}
